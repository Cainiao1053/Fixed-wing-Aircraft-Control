mod = peripheral.find("modem");
mod.open(224);
rednet.open("top");
pi = math.pi;
r0 = 0; --set a value to record roll value of the previous iteration
p0 = 0; -- set pitch from previous iteration
cmd = {};
rcmd = 0;
pcmd = 0;
while true do
Q = ship.getQuaternion(); --ship Quaternion
w = Q.w;
x = Q.z;
y = Q.x;
z = Q.y;
r = math.atan2(2*(w*x+y*z),(1-2*(x^2+y^2))); --roll, ship should be assembled to the south
p = math.asin(2*(w*y-x*z)); --pitch
y = math.atan2(2*(w*z+x*y),(1-2*(y^2+z^2))); --yaw
p = p*180/pi;
y = y*180/pi;
r = r*180/pi;
romg = (r-r0)/0.12; --angular velocity
r0 = r; --update r0
pomg = (p-p0)/0.12; -- angular velocity
p0 = p; --update
id,cmd = rednet.receive(nil, 0.1);
if cmd ~= nil then
    rcmd = cmd[1];
    pcmd = cmd[2];
end
if redstone.getInput("bottom") == true then
    rcmd = 0;
    pcmd = 0;
end
rollout = -(0.8*(r-rcmd)+((r-rcmd)^2*romg/110000)); --algorithm for roll, output the redstone target analog
pitchout = -(0.5*(p-pcmd)+((p-pcmd)^2*pomg/210000))*((90-math.abs(r))/90); --algorithm
if rollout<-15 then --redstone analog bound
    rollout = -15;
    elseif rollout>15 then
    rollout =15;
end
if pitchout<-15 then --output bound
    pitchout = -15;
    elseif pitchout>13 then
    pitchout =13;
end
redstone.setAnalogOutput("left", 0); -- clear the previous output
redstone.setAnalogOutput("right", 0);
if rollout<0 then --set outputs
    redstone.setAnalogOutput("left", math.abs(rollout)); --turn left
elseif rollout>0 then
    redstone.setAnalogOutput("right", rollout); --turn right
end
redstone.setAnalogOutput("front", 0); 
redstone.setAnalogOutput("back", 0);
if pitchout<0 then --set output
    redstone.setAnalogOutput("back", math.abs(pitchout)); --lift up
elseif pitchout>0 then
    redstone.setAnalogOutput("front", pitchout); --push down
end

end
